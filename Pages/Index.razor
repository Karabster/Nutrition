@page "/"
@using System.Security.Claims;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Components.Authorization;
@using Data;
@using Business.TableManagers;
@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject NutrientManager _NutritionManager

@if (CurrentUser.IsInRole(ADMINISTRATION_ROLE))
{
    <p>You are an Administrator named: <b>@CurrentUser.Identity.Name</b></p>
}
<RadzenGrid @ref="grid" AllowPaging="true" EditMode="CurrentUser.IsInRole(ADMINISTRATION_ROLE) ? DataGridEditMode.Single : DataGridEditMode.Multiple" PageSize="3" RowRender="@RowRender" ExpandMode="DataGridExpandMode.Single"
            Data="@nutrients" TItem="Nutrient" RowUpdate="@OnUpdateRow">
    <Template Context="nutrient">
        <RadzenCard Style="margin-bottom:20px">
            Description:
            <b>@nutrient?.NutrientDescription</b>
        </RadzenCard>
        <RadzenCard Style="margin-bottom:20px">
            Description:
            <b>@nutrient?.NutrientDescription</b>
        </RadzenCard>
        <RadzenCard Style="margin-bottom:20px">
            Description:
            <b>@nutrient?.NutrientDescription</b>
        </RadzenCard>
    </Template>
    <Columns>
        <RadzenGridColumn Width="10%" TItem="Nutrient" Property="NutrientId" Title="Nutrient ID" Sortable="true" />
        <RadzenGridColumn Width="40%" TItem="Nutrient" Property="NutrientName" Title="Name">
            <EditTemplate Context="nutrient">
                <RadzenTextBox @bind-Value="nutrient.NutrientName" Style="width:100%; display: block" Name="Nutrient Name" />
            </EditTemplate>
        </RadzenGridColumn>
        <RadzenGridColumn Width="50%" TItem="Nutrient" Property="NutrientDescription" Title="Description">
            <EditTemplate Context="nutrient">
                <RadzenTextBox @bind-Value="nutrient.NutrientDescription" Style="width:100%; display: block" Name="Nuitrient Description" />
            </EditTemplate>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="Nutrient" Context="sampleBlazorModelsSampleOrder" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
            <Template Context="nutrient">
                <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow(nutrient))">
                </RadzenButton>
            </Template>
            <EditTemplate Context="nutrient">
                <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => SaveRow(nutrient))">
                </RadzenButton>
                <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit(nutrient))">
                </RadzenButton>
            </EditTemplate>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="Nutrient" Context="order" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="70px">
            <Template Context="nutrient">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(nutrient))">
                </RadzenButton>
            </Template>
            <EditTemplate Context="nutrient">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(nutrient))">
                </RadzenButton>
            </EditTemplate>
        </RadzenGridColumn>
    </Columns>
</RadzenGrid>


@code {

    string ADMINISTRATION_ROLE = "Administrators";
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    ClaimsPrincipal CurrentUser = new ClaimsPrincipal();
    RadzenGrid<Nutrient> grid;
    private IEnumerable<Nutrient> nutrients;

    void CancelEdit(Nutrient nutrient)
    {
        grid.CancelEditRow(nutrient);
    }

    async void DeleteRow(Nutrient nutrient)
    {
        if (await _NutritionManager.DeleteNutrientAsync(nutrient))
        {
            await grid.Reload();
        }
        else
        {
            grid.CancelEditRow(nutrient);
        }
    }

    void EditRow(Nutrient nutrient)
    {
        grid.EditRow(nutrient);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            grid.ExpandRow(nutrients.FirstOrDefault());
            StateHasChanged();
        }

        base.OnAfterRender(firstRender);
    }

    void OnCreateRow(Nutrient nutrient)
    {
        _NutritionManager.CreateNutrientAsync(nutrient);
    }

    protected override async Task OnInitializedAsync()
    {
        // Ensure there is an ADMINISTRATION_ROLE
        var RoleResult = await _RoleManager.FindByNameAsync(ADMINISTRATION_ROLE);
        if (RoleResult == null)
        {
            // Create ADMINISTRATION_ROLE role.
            await _RoleManager.CreateAsync(new IdentityRole(ADMINISTRATION_ROLE));
        }
        // Try to get the administrator account.
        var user = await _UserManager.FindByNameAsync("134207@gmail.com");
        // Administrator may not be created yet.
        if (user != null)
        {
            // Is administrator account in the administrator role?
            var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
            if (!UserResult)
            {
                // Put admin in administrator role.
                await _UserManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
            }
        }
        // Get the current user.
        // Note: User may not be logged in.
        CurrentUser = (await authenticationStateTask).User;

        nutrients = _NutritionManager.GetAllNutrients();
    }

    async void OnUpdateRow(Nutrient nutrient)
    {
        await _NutritionManager.UpdateNutrientAsync(nutrient);
    }

    void RowRender(RowRenderEventArgs<Nutrient> args)
    {
        args.Expandable = args.Data.NutrientDescription != string.Empty;
    }

    void SaveRow(Nutrient nutrient)
    {
        grid.UpdateRow(nutrient);
    }
}
